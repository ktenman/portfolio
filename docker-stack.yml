version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: fov.ee
      POSTGRES_PASSWORD: run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U fov.ee -d portfolio" ]
      interval: 3s
      timeout: 1s
      retries: 5
    ports:
      - '5432:5432'
    deploy:
      restart_policy:
        condition: on-failure

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 3s
      timeout: 1s
      retries: 5
    deploy:
      restart_policy:
        condition: on-failure

  backend:
    image: ktenman/portfolio-be:latest
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/portfolio
      SPRING_DATASOURCE_USERNAME: fov.ee
      SPRING_DATASOURCE_PASSWORD: run/secrets/postgres_password
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1024M
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
    ports:
      - '8080:8080'

  frontend:
    image: ktenman/portfolio-fe:latest
    depends_on:
      - backend
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  app:
    image: caddy:2.8-alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:

secrets:
  postgres_user:
    external: true
  postgres_password:
    external: true
