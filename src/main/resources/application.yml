management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
  endpoint:
    health:
      show-details: always
      show-components: always
      status:
        http-mapping:
          down: 503
          out-of-service: 503
          up: 200
          unknown: 200
  health:
    db:
      enabled: true
    redis:
      enabled: true
    diskspace:
      enabled: true
  info:
    env:
      enabled: true
spring:
  application:
    name: portfolio
  docker:
    compose:
      enabled: true
      file: ./compose.yaml
  jackson:
    default-property-inclusion: non_null
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/portfolio}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 20000
      leak-detection-threshold: 60000
  jpa:
    hibernate:
      ddl-auto: none # Use 'update' for development
    show-sql: false
    database: POSTGRESQL
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        format_sql: false
        temp.use_jdbc_metadata_defaults: false
        id.new_generator_mappings: true
        cache.use_second_level_cache: false
        cache.use_query_cache: false
        generate_statistics: false

  flyway:
    url: ${spring.datasource.url}
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}
    enabled: true
    baseline-on-migrate: true

  data:
    redis:
      host: redis
      port: 6379
  
  task:
    scheduling:
      pool:
        size: 10
      thread-name-prefix: scheduled-
    execution:
      pool:
        core-size: 10
        max-size: 20
        queue-capacity: 100

logging:
  level:
    root: INFO
    org.springframework: INFO
    org.hibernate: INFO
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{20} %X{transactionId}- %msg%n'
#    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg %X{traceId}%n'
    file: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{20} %X{transactionId}- %msg%n'

server:
  port: ${SERVER_PORT:8081}

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method

alphavantage:
  url: https://www.alphavantage.co

binance:
  url: https://api.binance.com

auth:
  url: http://auth:8083

feign:
  client:
    config:
      default:
        loggerLevel: FULL

captcha:
  url: http://captcha-solver:8000

historicalPrices:
  url: https://markets.ft.com

ft:
  parallel:
    threads: 5
  instruments:
    parallel:
      threads: 5

vision:
  enabled: ${VISION_ENABLED:false}
  base64EncodedKey: ${VISION_BASE64_ENCODED_KEY:}

telegram:
  bot:
    enabled: ${TELEGRAM_BOT_ENABLED:false}
    token: ${TELEGRAM_BOT_TOKEN:}

build:
  hash: ${BUILD_HASH:unknown}
  time: ${BUILD_TIME:unknown}

webdriver:
  pool:
    size: ${WEBDRIVER_POOL_SIZE:2}
  headless: ${WEBDRIVER_HEADLESS:true}
  verify:
    on:
      startup: ${WEBDRIVER_VERIFY_ON_STARTUP:true}
  health:
    enabled: ${WEBDRIVER_HEALTH_ENABLED:false}

scheduling:
  enabled: ${SCHEDULING_ENABLED:true}
  jobs:
    binance-interval: ${BINANCE_JOB_INTERVAL:120000}
    ft-interval: ${FT_JOB_INTERVAL:120000}
    alphavantage-interval: ${ALPHAVANTAGE_JOB_INTERVAL:120000}
    xirr-interval: ${XIRR_JOB_INTERVAL:120000}
    summary-interval: ${SUMMARY_JOB_INTERVAL:120000}


