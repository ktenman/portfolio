name: "CodeQL Quality Scan"

on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.java'
      - '**/*.kt'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.vue'
      - '**/*.py'
      - '**/Dockerfile*'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.java'
      - '**/*.kt'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.vue'
      - '**/*.py'
      - '**/Dockerfile*'
      - '.github/workflows/**'
  schedule:
    - cron: '45 10 * * 1'  # Run weekly on Mondays (fixed syntax spacing)

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions  # Covers GitHub Actions YAML files
            build-mode: none
          - language: java-kotlin
            # Switching to manual build to use Gradle explicitly
            build-mode: manual
          - language: javascript-typescript  # Covers JS, TS, and Vue
            build-mode: none
          - language: python
            build-mode: none
        # Removed IAC as it's not a supported CodeQL language

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Full git history is needed for proper analysis of code changes
          fetch-depth: 0

      # Set up CodeQL database caching
      - name: Set up CodeQL database caching
        uses: actions/cache@v4
        with:
          path: ~/.codeql/databases
          key: ${{ runner.os }}-codeql-${{ matrix.language }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-codeql-${{ matrix.language }}-

      # For Java/Kotlin: Improve build by setting up Java with Gradle
      - name: Set up JDK 21
        if: matrix.language == 'java-kotlin'
        uses: actions/setup-java@v4
        with:
          java-version: '21'  # Matching your project's Java version
          distribution: 'temurin'
          cache: 'gradle'  # Enable Gradle caching for faster builds

      # For JavaScript/TypeScript: Set up Node.js
      - name: Set up Node.js
        if: matrix.language == 'javascript-typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # For Python: Set up Python
      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Setup Gradle wrapper validation
      - name: Validate Gradle wrapper
        if: matrix.language == 'java-kotlin'
        uses: gradle/wrapper-validation-action@v2

      # Run secret scanning - separate from CodeQL but still valuable
      - name: Run secret scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          queries: security-extended,security-and-quality
          # Optimize performance with threads and RAM allocation
          threads: 8
          ram: 4096

      # For Java/Kotlin using Gradle build
      - name: Build with Gradle
        if: matrix.language == 'java-kotlin'
        run: |
          # Skip tests to speed up the build while still generating the necessary files for analysis
          ./gradlew clean compileJava compileKotlin compileTestJava compileTestKotlin --no-daemon

      # For JavaScript/TypeScript projects that need build steps
      - name: Install npm dependencies
        if: matrix.language == 'javascript-typescript'
        run: npm ci

      # Docker linting - done directly without CodeQL since 'iac' isn't supported
      - name: Lint Docker files
        run: |
          # Install hadolint
          curl -sL -o /tmp/hadolint "https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64"
          chmod +x /tmp/hadolint

          # Scan all Dockerfiles in the repository
          find . -name "Dockerfile*" -type f -exec echo "Scanning {}" \; -exec /tmp/hadolint {} \;
        continue-on-error: true  # Don't fail the entire workflow if Docker linting fails

      # Perform the analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          upload: true
          # Output to a specific directory for artifacts
          output: sarif-results

      # Upload SARIF as artifact
      - name: Upload SARIF as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results-${{ matrix.language }}
          path: sarif-results/*.sarif
          retention-days: 7
