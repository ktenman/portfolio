name: "CodeQL Quality Scan"

on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.java'
      - '**/*.kt'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.vue'
      - '**/*.py'
      - '**/Dockerfile*'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.java'
      - '**/*.kt'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.vue'
      - '**/*.py'
      - '**/Dockerfile*'
      - '.github/workflows/**'
  schedule:
    - cron: '45 10 * * 1'  # Run weekly on Mondays

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions  # Covers GitHub Actions YAML files
            build-mode: none
          - language: java-kotlin
            build-mode: autobuild
          - language: javascript-typescript  # Covers JS, TS, and Vue
            build-mode: none
          - language: python
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Set up CodeQL database caching
      - name: Set up CodeQL database caching
        uses: actions/cache@v4
        with:
          path: ~/.codeql/databases
          key: ${{ runner.os }}-codeql-${{ matrix.language }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-codeql-${{ matrix.language }}-

      # For Java/Kotlin: Improve build by setting up Java with Gradle
      - name: Set up JDK 21
        if: matrix.language == 'java-kotlin'
        uses: actions/setup-java@v5.0.0
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      # For JavaScript/TypeScript: Set up Node.js
      - name: Set up Node.js
        if: matrix.language == 'javascript-typescript'
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'

      # For Python: Set up Python
      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v6.0.0
        with:
          python-version: '3.10'

      # Setup Gradle wrapper validation
      - name: Validate Gradle wrapper
        if: matrix.language == 'java-kotlin' && hashFiles('gradlew') != ''
        uses: gradle/wrapper-validation-action@v3.5.0

      # Run secret scanning with unique output name per job
      - name: Run secret scanning
        uses: gitleaks/gitleaks-action@v2.0.0
        with:
          report-format: sarif
          report-path: gitleaks-${{ matrix.language }}-results.sarif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true  # Don't fail the job if gitleaks fails

      # Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3.29.0
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          queries: security-extended,security-and-quality
          threads: 8
          config-file: ./.github/codeql/codeql-config.yml

      # For Java/Kotlin using Gradle build
      - name: Build with Gradle
        if: matrix.language == 'java-kotlin' && hashFiles('gradlew') != ''
        run: |
          # Check if we need to run in a subdirectory
          if [ -f "gradlew" ]; then
            echo "Building from root directory"
            ./gradlew compileJava compileKotlin --no-daemon || true
          elif [ -f "*/gradlew" ]; then
            echo "Building from subdirectory"
            for dir in */; do
              if [ -f "${dir}gradlew" ]; then
                echo "Building in ${dir}"
                cd ${dir} && ./gradlew compileJava compileKotlin --no-daemon || true
                cd ..
              fi
            done
          fi

      # For JavaScript/TypeScript projects that need build steps
      - name: Install npm dependencies
        if: matrix.language == 'javascript-typescript' && hashFiles('package.json') != ''
        run: npm ci

      # Docker linting - separate step
      - name: Lint Docker files
        run: |
          # Install hadolint
          curl -sL -o /tmp/hadolint "https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64"
          chmod +x /tmp/hadolint

          # Scan all Dockerfiles in the repository
          find . -name "Dockerfile*" -type f -exec echo "Scanning {}" \; -exec /tmp/hadolint {} \;
        continue-on-error: true

      # Perform the analysis - without custom output path
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3.29.0
        with:
          category: "/language:${{matrix.language}}"

      # Upload Gitleaks results as artifact
      - name: Upload Gitleaks results
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: gitleaks-${{ matrix.language }}-results
          path: gitleaks-${{ matrix.language }}-results.sarif
          retention-days: 7
          if-no-files-found: warn # Don't fail if no leaks found
