name: Deploy to Docker Swarm

on:
  workflow_call:
    secrets:
      FOV_SSH_PRIVATE_KEY:
        required: true
      POSTGRES_USER:
        required: true
      POSTGRES_PASSWORD:
        required: true
      GOOGLE_CLIENT_ID:
        required: true
      GOOGLE_CLIENT_SECRET:
        required: true
      ALLOWED_EMAILS:
        required: true
      VISION_BASE64_ENCODED_KEY:
        required: true
      TELEGRAM_BOT_TOKEN:
        required: true
      HEALTHCHECK_URL:
        required: true
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy Docker Swarm to fov.ee'
        required: true
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  deploy:
    name: ðŸš€ Deploy to fov.ee with zero downtime
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.FOV_SSH_PRIVATE_KEY }}

      - name: Add fov.ee SSH fingerprint to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H fov.ee >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          cat > .env << EOL
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          ALLOWED_EMAILS=${{ secrets.ALLOWED_EMAILS }}
          VISION_BASE64_ENCODED_KEY=${{ secrets.VISION_BASE64_ENCODED_KEY }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          HEALTHCHECK_URL=${{ secrets.HEALTHCHECK_URL }}
          BUILD_HASH=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          EOL

      - name: Copy files to server
        run: |
          scp .env docker-stack.yml Caddyfile healthcheck.sh githubuser@fov.ee:~/

      - name: Deploy to Docker Swarm
        run: |
          ssh githubuser@fov.ee "
            # Change to home directory to ensure files are found
            cd ~

            # Initialize swarm if not already in swarm mode
            if [ \"\$(docker info --format '{{.Swarm.LocalNodeState}}')\" != \"active\" ]; then
              docker swarm init --advertise-addr \$(hostname -i)
              docker network create --driver overlay portfolio_network
            fi

            # Load environment variables from .env file
            export \$(grep -v '^#' .env | xargs)

            # Deploy or update the stack with variables now in environment
            docker stack deploy -c docker-stack.yml --with-registry-auth portfolio

            # Clean up old images
            docker image prune -af --filter 'until=24h'
          "
