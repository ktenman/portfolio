name: Deploy to K3s

permissions:
  contents: read
  deployments: write

on:
  workflow_call:
    secrets:
      FOV_SSH_PRIVATE_KEY:
        required: true
      POSTGRES_USER:
        required: true
      POSTGRES_PASSWORD:
        required: true
      GOOGLE_CLIENT_ID:
        required: true
      GOOGLE_CLIENT_SECRET:
        required: true
      ALLOWED_EMAILS:
        required: true
      VISION_BASE64_ENCODED_KEY:
        required: true
      TELEGRAM_BOT_TOKEN:
        required: true
      HEALTHCHECK_URL:
        required: false
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy k3s'
        required: true
        type: boolean
        default: true

jobs:
  deploy:
    name: ðŸš€ Deploy to K3s
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.FOV_SSH_PRIVATE_KEY }}

      - name: Add fov.ee SSH fingerprint to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H fov.ee >> ~/.ssh/known_hosts

      - name: Copy Kubernetes manifests to server
        run: |
          ssh githubuser@fov.ee "rm -rf ~/k8s-deploy && mkdir -p ~/k8s-deploy"
          scp k8s/*.yaml githubuser@fov.ee:~/k8s-deploy/

      - name: Deploy to K3s cluster
        run: |
          ssh githubuser@fov.ee "
            # Use the K3s-generated kubeconfig that already exists on the server
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

            # Set up environment variables for secret substitution
            export POSTGRES_USER='${{ secrets.POSTGRES_USER }}'
            export POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
            export GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}'
            export GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}'
            export ALLOWED_EMAILS='${{ secrets.ALLOWED_EMAILS }}'
            export VISION_BASE64_ENCODED_KEY='${{ secrets.VISION_BASE64_ENCODED_KEY }}'
            export TELEGRAM_BOT_TOKEN='${{ secrets.TELEGRAM_BOT_TOKEN }}'
            export HEALTHCHECK_URL='${{ secrets.HEALTHCHECK_URL }}'

            # NEW: Set up build information - this is the key fix for the missing git hash
            export BUILD_HASH=\$(git -C ~/k8s-deploy rev-parse --short HEAD 2>/dev/null || echo 'unknown')
            export BUILD_TIME=\$(date -u +'%Y-%m-%dT%H:%M:%SZ')

            # If we want the actual commit from the repository being deployed, we need to get it differently
            # Since we're on the server, we'll use the hash from the GitHub context instead
            export BUILD_HASH='${{ github.sha }}'
            export BUILD_TIME=\$(date -u +'%Y-%m-%dT%H:%M:%SZ')

            echo \"Deploying with BUILD_HASH: \$BUILD_HASH and BUILD_TIME: \$BUILD_TIME\"

            # Create namespace and apply secrets
            kubectl create namespace portfolio --dry-run=client -o yaml | kubectl apply -f -
            envsubst < ~/k8s-deploy/secrets.yaml | kubectl apply -f -

            # Deploy all applications with environment variable substitution
            kubectl apply -f ~/k8s-deploy/postgres.yaml
            kubectl apply -f ~/k8s-deploy/redis.yaml

            # Apply backend with build info substitution - this is crucial
            envsubst < ~/k8s-deploy/backend.yaml | kubectl apply -f -

            kubectl apply -f ~/k8s-deploy/frontend.yaml
            kubectl apply -f ~/k8s-deploy/auth.yaml
            kubectl apply -f ~/k8s-deploy/market-tracker.yaml
            kubectl apply -f ~/k8s-deploy/captcha-solver.yaml
            kubectl apply -f ~/k8s-deploy/healthcheck.yaml
            kubectl apply -f ~/k8s-deploy/caddy-config.yaml
            kubectl apply -f ~/k8s-deploy/caddy.yaml

            # Wait for deployments to be ready
            kubectl rollout status deployment/backend -n portfolio --timeout=300s
            kubectl rollout status deployment/frontend -n portfolio --timeout=300s

            echo 'âœ… Deployment complete with build info: Hash=' \$BUILD_HASH ' Time=' \$BUILD_TIME
          "
