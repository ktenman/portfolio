name: Build & Test

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  lint-and-format:
    name: 🧹 Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - name: Use Node.js
        uses: actions/setup-node@v4.0.3
        with:
          node-version: 'lts/iron'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Check Prettier formatting
        run: npm run format:check

  test:
    name: 🧪 Gradle Test
    needs: lint-and-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [ 'unit', 'e2e' ]
    steps:
      - uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Start services with Docker Compose (for E2E tests)
        if: matrix.test-type == 'e2e'
        run: |
          docker-compose -f docker-compose.local.yml -f docker-compose.e2e.yml up -d
          sleep 10
          docker-compose logs
      - name: Set CI environment variable
        run: echo "E2E=${{ matrix.test-type == 'e2e' }}" >> $GITHUB_ENV
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.5.0
      - name: Run Gradle test
        run: ./gradlew test --info -x bootJar -Dselenide.reportsFolder=build/reports/selenide ${{ matrix.test-type == 'e2e' && '-Pheadless=true' || '' }}
      - uses: actions/upload-artifact@v4.3.4
        if: always()
        with:
          name: ${{ format('Test reports and screenshots ({0})', matrix.test-type) }}
          path: |
            build/reports/tests
            build/reports/selenide


  build-push:
    name: 🐳 Build & Push
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: backend
            dockerfile: ./Dockerfile.backend
            image: ktenman/portfolio-be
            context: .
          - name: frontend
            dockerfile: ./Dockerfile.frontend
            image: ktenman/portfolio-fe
            context: .
          - name: market-price-tracker
            dockerfile: ./market-price-tracker/Dockerfile
            image: ktenman/market-price-tracker
            context: ./market-price-tracker
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1
        with:
          buildkitd-flags: --debug

      - name: Login to Docker Hub
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and push ${{ matrix.name }} image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: ${{ matrix.image }}:latest

  deploy:
    name: 🚀 Deploy to fov.ee
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.FOV_SSH_PRIVATE_KEY }}

      - name: Add fov.ee SSH fingerprint to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H fov.ee >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env

      - name: Copy files to server
        run: |
          scp .env docker-compose.yml Caddyfile githubuser@fov.ee:~/

      - name: Deploy with Docker Compose
        run: |
          ssh githubuser@fov.ee "\
            docker pull 'ktenman/auth:latest' && \
            docker pull 'ktenman/portfolio-be:latest' && \
            docker pull 'ktenman/portfolio-fe:latest' && \
            docker pull 'ktenman/market-price-tracker:latest' && \
            docker-compose pull && \
            docker-compose up -d --build && \
            echo 'Pruning unused Docker images...' && \
            docker image prune -af"

#      - name: Cleanup on server
#        run: ssh githubuser@fov.ee "rm ~/docker-compose.yml ~/.env ~/Caddyfile"

      - name: Cleanup on runner
        run: rm ~/docker-compose.yml ~/.env ~/Caddyfile

  auto-merge-dependabot:
    name: 🤖 Auto-Merge Dependabot PR
    needs: [ test ]
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: 🤖Merge PR from dependabot
        uses: fastify/github-action-merge-dependabot@v3.10.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target: minor
          merge-method: rebase
