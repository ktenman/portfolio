name: Build, Test, and Deploy

permissions:
  contents: read
  packages: write
  actions: read
  pull-requests: read
  deployments: write

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Build, push Docker images, and deploy to fov.ee'
        required: true
        type: boolean
        default: true
  push:
  pull_request:

jobs:
  lint-and-test:
    name: ${{ matrix.job-name }}
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - job-type: lint-backend
            job-name: 🧹 Lint Backend
          - job-type: lint-frontend
            job-name: 🧹 Lint Frontend
          - job-type: backend-unit
            job-name: 🧪 Backend Unit Tests
          - job-type: e2e
            job-name: 🧪 E2E Tests
          - job-type: frontend-unit
            job-name: 🧪 Frontend Unit Tests
      fail-fast: false
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1
      - name: Set up JDK 21
        if: matrix.job-type == 'lint-backend' || matrix.job-type == 'backend-unit' || matrix.job-type == 'e2e'
        uses: actions/setup-java@v5.0.0
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Setup Gradle
        if: matrix.job-type == 'lint-backend' || matrix.job-type == 'backend-unit' || matrix.job-type == 'e2e'
        uses: gradle/actions/setup-gradle@v5.0.0
        with:
          gradle-home-cache-cleanup: true
      - name: Use Node.js
        if: matrix.job-type == 'lint-frontend' || matrix.job-type == 'frontend-unit'
        uses: actions/setup-node@v5
        with:
          node-version: 'lts/iron'
          cache: 'npm'
      - name: Install frontend dependencies
        if: matrix.job-type == 'lint-frontend' || matrix.job-type == 'frontend-unit'
        run: npm ci
      - name: Run ktlint check
        if: matrix.job-type == 'lint-backend'
        run: ./gradlew ktlintCheck
      - name: Run ESLint
        if: matrix.job-type == 'lint-frontend'
        run: npm run lint
      - name: Check Prettier formatting
        if: matrix.job-type == 'lint-frontend'
        run: npm run format:check
      - name: Check unused exports and files
        if: matrix.job-type == 'lint-frontend'
        run: npm run check-unused
      - name: Check README links
        if: matrix.job-type == 'lint-frontend'
        run: .github/workflows/check-readme-links.sh
      - name: Set up Docker Compose
        if: matrix.job-type == 'e2e'
        uses: ndeloof/install-compose-action@v0.0.1
      - name: Cache Docker images
        if: matrix.job-type == 'e2e'
        uses: ScribeMD/docker-cache@0.5.0
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('docker-compose.e2e-minimal.yml') }}
      - name: Start services with Docker Compose (for E2E tests)
        if: matrix.job-type == 'e2e'
        env:
          VISION_BASE64_ENCODED_KEY: ${{ secrets.VISION_BASE64_ENCODED_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          docker-compose -f docker-compose.e2e-minimal.yml up -d
          echo "Waiting for services to be healthy..."
          docker-compose -f docker-compose.e2e-minimal.yml ps
          timeout 120 bash -c 'until [ $(docker-compose -f docker-compose.e2e-minimal.yml ps | grep -c "(healthy)") -ge 4 ]; do echo "Waiting for services..."; sleep 2; done'
          echo "All services are healthy!"
          docker-compose -f docker-compose.e2e-minimal.yml ps
      - name: Run backend unit tests
        if: matrix.job-type == 'backend-unit'
        run: ./gradlew test --info -x bootJar --build-cache
      - name: Run E2E tests
        if: matrix.job-type == 'e2e'
        uses: Wandalen/wretry.action@v3.8.0
        with:
          command: |
            export E2E=true
            ./gradlew test --info -x bootJar -Dselenide.reportsFolder=build/reports/selenide -Pheadless=true --build-cache
          attempt_limit: 3
          attempt_delay: 30000
      - name: Run frontend unit tests
        if: matrix.job-type == 'frontend-unit'
        run: npm run test:run
      - name: Run frontend test coverage
        if: matrix.job-type == 'frontend-unit'
        run: npm run test:coverage
      - uses: actions/upload-artifact@v4.6.2
        if: always() && matrix.job-type == 'backend-unit'
        with:
          name: Backend Unit Test Reports
          path: |
            build/reports/tests/test/
            build/test-results/test/
            build/reports/jacoco/test/html/
      - uses: actions/upload-artifact@v4.6.2
        if: always() && matrix.job-type == 'e2e'
        with:
          name: E2E Test Reports and Screenshots
          path: |
            build/reports/tests/test/
            build/test-results/test/
            build/reports/selenide/
            build/reports/jacoco/test/html/
      - uses: actions/upload-artifact@v4.6.2
        if: always() && matrix.job-type == 'frontend-unit'
        with:
          name: Frontend Unit Test Reports
          path: |
            coverage/
            test-results/html/
            test-results/junit.xml

  build-push:
    name: 🐳 Build & Push ${{ matrix.name }} image
    needs: lint-and-test
    if: always() && (needs.lint-and-test.result == 'success' || github.event_name == 'workflow_dispatch') && (github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - name: backend
            dockerfile: ./src/Dockerfile
            image: ktenman/portfolio-be
            context: .
          - name: frontend
            dockerfile: ./ui/Dockerfile
            image: ktenman/portfolio-fe
            context: .
          - name: market-price-tracker
            dockerfile: ./market-price-tracker/Dockerfile
            image: ktenman/market-price-tracker
            context: ./market-price-tracker
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
      - name: Set build info
        id: build_info
        run: |
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          buildkitd-flags: --debug
      - name: Login to Docker Hub
        uses: docker/login-action@v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Build and push ${{ matrix.name }} image
        uses: docker/build-push-action@v6.18.0
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ matrix.image }}:latest
          build-args: |
            BUILD_HASH=${{ env.COMMIT_HASH }}
            BUILD_TIME=${{ env.BUILD_TIME }}

  call-deploy-pipeline:
    name: 🔄 Call Deploy Pipeline
    needs: build-push
    if: always() && (needs.build-push.result == 'success' && (github.event_name != 'workflow_dispatch' || github.event.inputs.deploy == 'true'))
    permissions:
      contents: read
      deployments: write
    uses: ./.github/workflows/deploy-pipeline.yml
    secrets:
      FOV_SSH_PRIVATE_KEY: ${{ secrets.FOV_SSH_PRIVATE_KEY }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      HEALTHCHECK_URL: ${{ secrets.HEALTHCHECK_URL }}
      ALLOWED_EMAILS: ${{ secrets.ALLOWED_EMAILS }}
      VISION_BASE64_ENCODED_KEY: ${{ secrets.VISION_BASE64_ENCODED_KEY }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  auto-merge-dependabot:
    name: 🤖 Auto-Merge Dependabot PR
    needs: [ lint-and-test ]
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: 🤖Merge PR from dependabot
        uses: fastify/github-action-merge-dependabot@v3.11.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target: minor
          merge-method: rebase
