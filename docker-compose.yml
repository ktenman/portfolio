services:
  postgres:
    container_name: postgres
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d portfolio" ]
      interval: 3s
      timeout: 1s
      retries: 5
    restart: always
    ports:
      - '5432:5432'

  redis:
    container_name: redis
    image: redis:7.0-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 3s
      timeout: 1s
      retries: 5
    restart: always

  backend:
    container_name: backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/portfolio
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    image: ktenman/portfolio-be:latest
    ports:
      - '8080:8080'
    depends_on:
      - postgres
      - redis
    restart: always
    mem_limit: 1024m
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 8s
      timeout: 2s
      retries: 15

  frontend:
    container_name: frontend
    image: ktenman/portfolio-fe:latest
    depends_on:
      - backend
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:80 || exit 1" ]
      interval: 3s
      timeout: 1s
      retries: 5

  auth:
    container_name: auth
    image: ktenman/auth:latest
    environment:
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      ALLOWED_EMAILS: "ktenman@gmail.com,ktenman.cyber@gmail.com,konstantin@tenman.ee"
      ALLOWED_LOGINS: "ktenman"
      REDIRECT_URI: "https://fov.ee"
      SPRING_REDIS_HOST: redis
      SERVER_PORT: 8083
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1" ]
      interval: 6s
      timeout: 2s
      retries: 18

  app:
    container_name: app
    image: caddy:2.8-alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "for i in 1 2 3 4 5; do apk add --no-cache curl && break || sleep 5; done && curl -f -k http://localhost:80/healthz || exit 1" ]
      interval: 12s
      timeout: 3s
      retries: 5

  market_price_tracker:
    container_name: mpt
    image: ktenman/market-price-tracker:latest
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    environment:
      - BACKEND_URL=http://backend:8080/api/instruments
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  healthcheck:
    container_name: healthcheck
    image: alpine:latest
    depends_on:
      - postgres
      - redis
      - backend
      - frontend
      - auth
      - app
      - market_price_tracker
    environment:
      - HEALTHCHECK_URL=${HEALTHCHECK_URL}
    command: |
      /bin/sh -c '
      apk add --no-cache curl jq;
      if [ -z "$${HEALTHCHECK_URL}" ]; then
        echo "Error: HEALTHCHECK_URL is not set";
        exit 1;
      fi;
      while true; do
        all_healthy=true;
        for service in postgres redis backend frontend auth app market_price_tracker; do
          health=$$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/$${service}/json | jq -r .State.Health.Status);
          echo "$(date): $${service} status: $${health}";
          if [ "$${health}" != "healthy" ]; then
            all_healthy=false;
          fi
        done;
        if $${all_healthy}; then
          echo "$(date): All services are healthy. Sending ping to $${HEALTHCHECK_URL}";
          if curl -fsS -m 10 --retry 5 -o /dev/null "$${HEALTHCHECK_URL}"; then
            echo "$(date): Health check ping sent successfully";
          else
            echo "$(date): Failed to send health check ping";
          fi
        else
          echo "$(date): Not all services are healthy. Skipping health check ping.";
        fi;
        sleep 60;
      done
      '
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:
