services:
  postgres:
    container_name: postgres
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d portfolio" ]
      interval: 3s
      timeout: 1s
      retries: 5
    restart: always
    ports:
      - '5432:5432'

  redis:
    container_name: redis
    image: redis:7.0-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 3s
      timeout: 1s
      retries: 5
    restart: always

  backend:
    container_name: backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/portfolio
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_PROFILES_ACTIVE: default
      VISION_BASE64_ENCODED_KEY: ${VISION_BASE64_ENCODED_KEY}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      VISION_ENABLED: true
      TELEGRAM_BOT_ENABLED: true
      BUILD_HASH: ${BUILD_HASH:-local}
      BUILD_TIME: ${BUILD_TIME:-local}
      KEYCLOAK_REALM: portfolio
      KEYCLOAK_CLIENT_ID: portfolio-app
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080/auth
    image: ktenman/portfolio-be:latest
    ports:
      - '8080:8080'
    depends_on:
      - postgres
      - redis
      - keycloak
    restart: always
    mem_limit: 2048m
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 8s
      timeout: 2s
      retries: 15

  frontend:
    container_name: frontend
    image: ktenman/portfolio-fe:latest
    depends_on:
      - backend
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:80 || exit 1" ]
      interval: 3s
      timeout: 1s
      retries: 5

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.0
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_PROXY: edge
      KC_HOSTNAME_STRICT: false
      KC_HTTP_RELATIVE_PATH: /auth
    depends_on:
      - postgres
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak-initializer:
    image: quay.io/keycloak/keycloak:24.0.0
    depends_on:
      keycloak:
        condition: service_healthy
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    volumes:
      - ./keycloak-init.sh:/keycloak-init.sh
    entrypoint: [ "/bin/bash", "/keycloak-init.sh" ]
    restart: on-failure

  keycloak-gatekeeper:
    container_name: keycloak-gatekeeper
    image: quay.io/gogatekeeper/gatekeeper:latest
    environment:
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_ENCRYPTION_KEY: ${KEYCLOAK_ENCRYPTION_KEY}
    volumes:
      - ./keycloak-gatekeeper.yml:/etc/keycloak-gatekeeper.yml
    command: --config /etc/keycloak-gatekeeper.yml
    depends_on:
      - keycloak
    restart: always

  app:
    container_name: app
    image: caddy:2.8-alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - keycloak
      - keycloak-gatekeeper
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f -k http://localhost:80/healthz || exit 1" ]
      interval: 12s
      timeout: 3s
      retries: 5

  market_price_tracker:
    container_name: market_price_tracker
    image: ktenman/market-price-tracker:latest
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    environment:
      - BACKEND_URL=http://backend:8080/api/instruments
      - FETCH_INTERVAL=180
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  captcha-solver:
    container_name: captcha_solver
    image: ktenman/captcha-solver:latest
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - app

  restart_scheduler:
    image: docker:cli
    container_name: restart_scheduler
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: sh -c 'while true; do [ "$(date +%H:%M)" = "03:00" ] && docker restart market_price_tracker && sleep 3600; sleep 30; done'
    restart: always

  healthcheck:
    container_name: healthcheck
    image: alpine:latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      app:
        condition: service_healthy
      market_price_tracker:
        condition: service_healthy
    environment:
      - HEALTHCHECK_URL=${HEALTHCHECK_URL}
    volumes:
      - ./healthcheck.sh:/usr/local/bin/healthcheck.sh
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: /usr/local/bin/healthcheck.sh
    restart: always

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:
