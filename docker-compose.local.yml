services:
  postgres:
    container_name: postgres
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data_v16_local:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d portfolio" ]
      interval: 3s
      timeout: 1s
      retries: 5
    restart: always
    ports:
      - '5432:5432'

  redis:
    container_name: redis
    image: redis:7-alpine
    volumes:
      - redis_data_local:/data
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 3s
      timeout: 1s
      retries: 5
    restart: always

  backend:
    container_name: backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/portfolio
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_PROFILES_ACTIVE: local
      VISION_BASE64_ENCODED_KEY: ${VISION_BASE64_ENCODED_KEY}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
    build:
      context: .
      dockerfile: src/Dockerfile
    depends_on:
      - postgres
      - redis
    restart: always
    mem_limit: 1024m
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 8s
      timeout: 2s
      retries: 15

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: ui/Dockerfile
    depends_on:
      - backend
    restart: always

  app:
    container_name: app
    image: nginx:alpine
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
    restart: always

  captcha-solver:
    container_name: captcha_solver
    image: ktenman/captcha-solver:latest
    ports:
      - "8000:8000"
    restart: always

  market_price_tracker:
    container_name: market_price_tracker
    build:
      context: ./market-price-tracker
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    environment:
      - BACKEND_URL=http://backend:8080/api/instruments
      - FETCH_INTERVAL=15
    mem_limit: 512m
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data_v16_local:
  redis_data_local:
