services:
  postgres:
    image: postgres:17.2-alpine
    container_name: portfolio-postgres
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "61240:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - portfolio-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d portfolio" ]
      interval: 3s
      timeout: 1s
      retries: 5

  redis:
    image: redis:8-alpine
    container_name: portfolio-redis
    ports:
      - "61241:6379"
    networks:
      - portfolio-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 3s
      timeout: 1s
      retries: 5

  keycloak-db:
    image: postgres:17-alpine
    container_name: portfolio-keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth:
    image: ktenman/auth:latest
    container_name: portfolio-auth
    ports:
      - "8083:8083"
    environment:
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - REDIRECT_URI=http://localhost/
      - ALLOWED_EMAILS=${ALLOWED_EMAILS}
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    command: ["sh", "-c", "java -Dserver.servlet.session.cookie.secure=false -Dspring.session.cookie.secure=false -Dserver.servlet.session.cookie.same-site=lax -jar /app/app.jar"]
    depends_on:
      - redis
    networks:
      - portfolio-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1" ]
      interval: 6s
      timeout: 2s
      retries: 18

  backend:
    build:
      context: .
      dockerfile: src/Dockerfile
    container_name: portfolio-backend
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/portfolio
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_FLYWAY_ENABLED=true
      - SCHEDULING_ENABLED=false
      - SERVER_PORT=8081
    depends_on:
      - postgres
      - redis
    networks:
      - portfolio-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1" ]
      interval: 8s
      timeout: 2s
      retries: 15

  frontend:
    image: node:23.5.0-alpine
    container_name: portfolio-frontend
    working_dir: /app
    volumes:
      - ./ui:/app/ui
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      - ./vite.config.ts:/app/vite.config.ts
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.app.json:/app/tsconfig.app.json
      - ./tsconfig.node.json:/app/tsconfig.node.json
      - ./index.html:/app/index.html
      - ./vitest.config.ts:/app/vitest.config.ts
      - ./.eslintrc.cjs:/app/.eslintrc.cjs
    command: sh -c "npm install && npm run dev -- --host"
    ports:
      - "61234:61234"
    environment:
      - NODE_ENV=development
    networks:
      - portfolio-network

  app:
    image: caddy:2.8.4-alpine
    container_name: portfolio-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile.local:/etc/caddy/Caddyfile
      - caddy-data:/data
      - caddy-config:/config
    depends_on:
      - auth
      - backend
      - frontend
    networks:
      - portfolio-network

networks:
  portfolio-network:
    driver: bridge

volumes:
  postgres-data:
  caddy-data:
  caddy-config:
  keycloak_data:
    driver: local
