{
    email ktenman@gmail.com
    # Enable automatic HTTPS with Let's Encrypt
    # Caddy will automatically obtain and renew certificates
}

# ──────────────── HEALTH CHECK ENDPOINTS (HTTP) ────────────────
# These endpoints handle health checks on HTTP port 80 directly
# This solves the Kubernetes probe warnings by providing a simple endpoint
# that doesn't require HTTPS or authentication
:80 {
    # Handle health checks for all domains on HTTP without redirects
    handle_path /healthz {
        respond "OK" 200
    }

    # Handle health checks with any domain header (for load balancers)
    @health_check {
        path /healthz
    }
    handle @health_check {
        respond "OK" 200
    }

    # For all other requests on HTTP, redirect to HTTPS for security
    handle {
        redir https://{host}{uri} permanent
    }
}

# ──────────────── CAPTCHA SUBDOMAIN (Public Service) ────────────────
# This subdomain provides a completely public captcha-solving service
# No authentication required - it's a utility service for external use
captcha.fov.ee {
    # Add health check endpoint for HTTPS as well
    handle_path /healthz {
        respond "OK" 200
    }

    # Redirect root requests to the documentation page
    @root {
        path_regexp ^/?$
    }
    handle @root {
        redir https://captcha.fov.ee/docs permanent
    }

    # Proxy all other requests to the captcha solver service
    handle * {
        reverse_proxy captcha-solver:8000 {
            # Pass the real client IP to the captcha service
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
        }
    }
}

# ──────────────── CALCULATOR SUBDOMAIN (Public Service) ────────────────
# This provides a completely public calculator service
# Think of this as a "demo mode" that showcases your calculation capabilities
# without requiring users to create accounts
calculator.fov.ee {
    # Enable compression for better performance
    encode gzip

    # Add health check endpoint
    handle_path /healthz {
        respond "OK" 200
    }

    # Redirect root to the calculator interface
    handle / {
        redir /calculator permanent
    }

    # Serve the calculator frontend interface
    handle /calculator* {
        # Disable caching for the calculator interface to ensure users get updates
        header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate"
        header Pragma "no-cache"
        header Expires "0"
        reverse_proxy frontend:80
    }

    # Public API endpoint for calculator functionality
    # This allows external applications to use your calculation API
    handle /api/calculator {
        # Enable CORS for external API usage
        header Access-Control-Allow-Origin "*"
        header Access-Control-Allow-Methods "GET, POST, OPTIONS"
        header Access-Control-Allow-Headers "Content-Type"
        reverse_proxy backend:8080
    }

    # Serve static assets (JavaScript, CSS, images) needed by the calculator
    handle {
        # Cache static assets for better performance
        header Cache-Control "public, max-age=3600"
        reverse_proxy frontend:80
    }
}

# ──────────────── TORRENTS SUBDOMAIN (Protected File Server) ────────────────
# This provides authenticated access to torrent files using the same auth pattern as the main domain
# Follows the established security model with forward_auth validation
torrents.fov.ee {
    # Enable compression for better file transfer performance
    encode gzip

    # Health check endpoint (follows the same pattern as other subdomains)
    handle_path /healthz {
        respond "OK" 200
    }

    # All other routes require authentication using the same forward_auth pattern as main domain
    handle {
        # ────── AUTHENTICATION GATEKEEPER (same as main domain) ──────
        # Use the exact same authentication validation as your protected routes
        forward_auth auth:8083 {
            # Same validation endpoint as main domain
            uri /validate
            # Copy the same user identification headers
            copy_headers X-User-Id X-User-Email
            # Preserve important headers for the validation request
            header_up Host {http.request.host}
            header_up X-Forwarded-Method {http.request.method}
            header_up X-Forwarded-Uri {http.request.uri}
        }

        # ────── FILE SERVER (after successful authentication) ──────
        # Serve files from the torrents directory with directory browsing enabled
        file_server {
            root /srv/torrents
            # Enable directory browsing with Caddy's built-in template
            browse
            # Hide system files and directories (same security approach as your existing setup)
            hide .* Thumbs.db Desktop.ini .DS_Store
        }

        # Set security headers (following your established security practices)
        header {
            # Same security headers pattern as your main domain
            X-Frame-Options "SAMEORIGIN"
            X-Content-Type-Options "nosniff"
            X-XSS-Protection "1; mode=block"
            Referrer-Policy "strict-origin-when-cross-origin"

            # Additional headers for file downloads
            -Server  # Hide server information for security
        }

        # Set appropriate cache headers for different file types
        @media_files {
            path *.mp4 *.mkv *.avi *.mov *.wmv *.flv *.webm *.m4v
        }
        header @media_files {
            Cache-Control "public, max-age=3600"  # 1 hour cache for media files
        }

        @torrent_files {
            path *.torrent
        }
        header @torrent_files {
            Content-Type "application/x-bittorrent"
            Cache-Control "public, max-age=86400"  # 24 hour cache for torrent files
        }

        @archive_files {
            path *.zip *.rar *.7z *.tar *.gz *.bz2
        }
        header @archive_files {
            Cache-Control "public, max-age=7200"  # 2 hour cache for archives
        }
    }
}

# ──────────────── WWW REDIRECT ────────────────
# Redirect www.fov.ee to fov.ee for SEO consistency
www.fov.ee {
    redir https://fov.ee{uri} permanent
}

# ──────────────── MAIN DOMAIN (Protected Application) ────────────────
# This is your main application with sophisticated authentication
fov.ee {
    # Enable compression for all responses
    encode gzip

    # Add health check endpoint for HTTPS
    handle_path /healthz {
        respond "OK" 200
    }

    # ────── PUBLIC CALCULATOR ROUTES (No Auth Required) ──────
    # These routes provide calculator functionality on the main domain
    # without requiring authentication, making it easy for users to try
    @calculator_routes {
        path /calculator /calculator/* /assets/* *.js *.css *.svg *.ico *.png *.jpg *.jpeg *.gif *.woff *.woff2 *.ttf
    }
    handle @calculator_routes {
        # Disable caching for dynamic calculator content
        header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate"
        header Pragma "no-cache"
        header Expires "0"
        reverse_proxy frontend:80
    }

    # ────── AUTHENTICATION INFRASTRUCTURE ROUTES ──────
    # These routes handle the authentication machinery itself
    # They must remain unprotected so users can actually log in
    @auth_routes {
        path /login /login/* /oauth2/* /logout
    }
    handle @auth_routes {
        # Forward authentication requests to the auth service
        reverse_proxy auth:8083 {
            # Preserve the original host header for OAuth redirects
            header_up Host {http.request.host}
        }
    }

    # ────── PUBLIC API ENDPOINTS ──────
    # Calculator API endpoint - publicly accessible for demo purposes
    handle /api/calculator {
        # Enable CORS for the public calculator API
        header Access-Control-Allow-Origin "*"
        header Access-Control-Allow-Methods "GET, POST, OPTIONS"
        header Access-Control-Allow-Headers "Content-Type"
        reverse_proxy backend:8080
    }

    # ────── PROTECTED ROUTES (Authentication Required) ──────
    # Everything else requires authentication using our sophisticated matcher
    # This uses a "negative matcher" - protected routes are defined as
    # "everything that isn't explicitly public"
    @protected {
        not path /login /login/* /oauth2/* /logout /calculator /calculator/* /assets/* *.js *.css *.svg *.ico *.png *.jpg *.jpeg *.gif *.woff *.woff2 *.ttf /api/calculator
    }
    handle @protected {
        # ────── AUTHENTICATION GATEKEEPER ──────
        # Before forwarding any protected request, first validate authentication
        # This is the heart of your security system
        forward_auth auth:8083 {
            # The auth service validation endpoint
            uri /validate
            # Copy user identification headers back to the main request
            copy_headers X-User-Id X-User-Email
            # Preserve important headers for the validation request
            header_up Host {http.request.host}
            header_up X-Forwarded-Method {http.request.method}
            header_up X-Forwarded-Uri {http.request.uri}
        }

        # ────── PROTECTED API ROUTES ──────
        # These are your main application APIs - portfolio, transactions, etc.
        @api {
            path /api/*
        }
        handle @api {
            reverse_proxy backend:8080 {
                # Pass through any user identification headers from auth
                header_up X-User-Id {http.request.header.X-User-Id}
                header_up X-User-Email {http.request.header.X-User-Email}
            }
        }

        # ────── PROTECTED FRONTEND ROUTES ──────
        # All other requests go to your main application frontend
        # This includes routes like /, /instruments, /transactions, etc.
        handle {
            reverse_proxy frontend:80 {
                # Add cache headers for the main application
                header_up Cache-Control "no-cache, no-store, must-revalidate"
            }
        }
    }
}
